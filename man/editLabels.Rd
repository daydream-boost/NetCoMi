% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/editLabels.R
\name{editLabels}
\alias{editLabels}
\title{Edit labels}
\usage{
editLabels(
  x,
  shortenLabels = c("intelligent", "simple", "none"),
  labelLength = 6,
  labelPattern = NULL,
  addBrack = TRUE,
  charToRm = NULL,
  verbose = TRUE
)
}
\arguments{
\item{x}{character vector with node labels.}

\item{shortenLabels}{character indicating how to shorten the labels. 
Available options are:
\describe{
\item{\code{"intelligent"}}{Elements of \code{charToRm} are removed,
labels are shortened to length \code{labelLength}, and duplicates are
removed using \code{labelPattern}.}
\item{\code{"simple"}}{Elements of \code{charToRm} are  removed and labels
are shortened to length \code{labelLength}.}
\item{\code{"none"}}{Labels are not shortened.} }}

\item{labelLength}{integer defining the length to which labels shall
be shortened if \code{shortenLabels} is used. Defaults to 6.}

\item{labelPattern}{vector of three or five elements, which is used if 
argument \code{shortenLabels} is set to \code{"intelligent"}. 
If cutting a label to length \code{labelLength} leads to duplicates, 
the label is shortened according to \code{labelPattern}, 
where the first entry gives the length of the first part, 
the second entry is used a separator, and the third entry
is the length of the third part. If \code{labelPattern} has five elements 
and the shortened labels are still not unique, 
the fourth element serves as further separator, and the fifth element gives
the length of the last label part. Defaults to c(4, "'", 3, "'", 3). 
See details for an example.}

\item{addBrack}{logical indicating whether to add a closing square bracket. 
If \code{TRUE}, a "]" is added if the first part contains a "[".}

\item{charToRm}{character vector giving one or more patterns to remove from 
the labels.}

\item{verbose}{logical. If \code{TRUE}, the function is allowed to return 
messages.}
}
\value{
Character vector with edited labels.
}
\description{
Function for editing node labels, i.e., shortening to a certain
  length and removing unwanted characters.\cr\cr
  The function is used by NetCoMi's plot functions 
  \code{\link{plot.microNetProps}} and \code{\link{plot.diffnet}}.
}
\details{
Consider a vector with three bacteria names: "Streptococcus1", 
  "Streptococcus2", and "Streptomyces".\cr\cr
  
  \code{shortenLabels = "simple"} with \code{labelLength = 6}
   leads to shortened labels: 
  "Strept", "Strept", and "Strept", which are not distinguishable. \cr\cr
  
  \code{shortenLabels = "intelligent"} with 
  \code{labelPattern = c(5, "'", 3)} leads to shortened labels:
  "Strep'coc", "Strep'coc", are "Strep'myc", where the first two are not 
  distinguishable.
  
  \code{shortenLabels = "intelligent"} with 
  \code{labelPattern = c(5, "'", 3, "'", 3)} leads to shortened labels:
  "Strep'coc'1", "Strep'coc'2", and "Strep'myc", from which the original
  labels can be inferred.\cr\cr
  
  The intelligent approach is as follows:\cr\cr 
  First, labels are shortened to the 
  defined length (argument \code{labelLength}). The \code{labelPattern} is 
  then applied to all duplicated labels. For each group of duplicates, 
  the third label part starts at the letter where two or more labels are 
  different for the first time. 
  The five-part pattern (if given) applies if a group of 
  duplicates consists of more than two labels and if the shortened labels are 
  not unique after applying the three-part pattern. Then, the fifth part 
  starts at the letter where all labels are different for the first time.
  \cr\cr  A message is printed if the returned labels are not unique.
}
\examples{
labels <- c("Salmonella", 
            "Clostridium", "Clostridiales(O)", 
            "Ruminococcus", "Ruminococcaceae(F)", 
            "Enterobacteriaceae", "Enterococcaceae",
            "[Bacillus] alkalinitrilicus",
            "[Bacillus] alkalisediminis",
            "[Bacillus] oceani")

# Use the "simple" method to shorten labels
editLabels(labels, shortenLabels = "simple", labelLength = 6)
# -> Original labels cannot be inferred from shortened labels

# Use the "intelligent" method to shorten labels with three-part pattern
editLabels(labels, shortenLabels = "intelligent", labelLength = 6,
           labelPattern = c(6, "'", 4))
# -> [Bacillus] alkalinitrilicus and [Bacillus] alkalisediminis not 
#    distinguishable

# Use the "intelligent" method to shorten labels with five-part pattern
editLabels(labels, shortenLabels = "intelligent", labelLength = 6,
           labelPattern = c(6, "'", 3, "'", 3))

# Same as before but no brackets are added
editLabels(labels, shortenLabels = "intelligent", labelLength = 6, 
           addBrack = FALSE, labelPattern = c(6, "'", 3, "'", 3))

# Remove character pattern(s) (can also be a vector with multiple patterns)
labels <- c("g__Faecalibacterium", "g__Clostridium", "g__Eubacterium", 
            "g__Bifidobacterium", "g__Bacteroides")
            
editLabels(labels, charToRm = "g__")

}
