% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/netCompare.R
\name{netCompare}
\alias{netCompare}
\title{Group Comparison of Network Properties}
\usage{
netCompare(
  x,
  permTest = FALSE,
  lnormFit = NULL,
  jaccQuant = 0.75,
  nPerm = 1000L,
  adjust = "adaptBH",
  trueNullMethod = "convest",
  nPermRand = 1000L,
  cores = 1L,
  logFile = NULL,
  seed = NULL,
  verbose = TRUE,
  fileLoadAssoPerm = NULL,
  fileLoadCountsPerm = NULL,
  storeAssoPerm = FALSE,
  fileStoreAssoPerm = "assoPerm",
  storeCountsPerm = FALSE,
  fileStoreCountsPerm = c("countsPerm1", "countsPerm2"),
  returnPermProps = FALSE,
  returnPermCentr = FALSE,
  assoPerm = NULL,
  dissPerm = NULL
)
}
\arguments{
\item{x}{object of class \code{"microNetProps"} (inheriting from a call to
\code{\link[NetCoMi]{netAnalyze}}).}

\item{permTest}{logical. If \code{TRUE}, a permutation test is conducted in
order to test centrality measures and global network properties for group
differences. Defaults to \code{FALSE}. May lead to a considerably increased
execution time!}

\item{lnormFit}{logical indicating whether a log-normal distribution should
be fitted to the calculated centrality values for determining Jaccard's
index (see details). If \code{NULL} (default), the value is adopted
from the input, so that the same method is used which has already been used
for determining the hub nodes.}

\item{jaccQuant}{numeric value between 0 and 1 specifying the quantile which
is used as threshold to identify the most central nodes for each centrality
measure. The resulting sets of nodes are used to calculate Jaccard's index
(see details). Defaults to 0.75.}

\item{nPerm}{number of permutations.}

\item{adjust}{character indicating the method used for multiple testing
adjustment of the permutation p-values. Possible values are \code{"lfdr"}
(default) for local false discovery rate correction (via
\code{\link[fdrtool]{fdrtool}}), \code{"adaptBH"} for the adaptive
Benjamini-Hochberg method \cite{(Benjamini and Hochberg, 2000)},  or one of
the methods provided by \code{\link[stats]{p.adjust}} (see
\code{p.adjust.methods()}).}

\item{trueNullMethod}{character indicating the method used for estimating the
proportion of true null hypotheses from a vector of p-values. Used for the
adaptive Benjamini-Hochberg method for multiple testing adjustment (chosen
by \code{adjust = "adaptBH"}). Accepts the provided options of the
\code{method} argument of \code{\link[limma]{propTrueNull}}:
\code{"convest"}(default), \code{"lfdr"}, \code{"mean"}, and \code{"hist"}.
Can alternatively be \code{"farco"} for the "iterative plug-in method"
proposed by \cite{Farcomeni (2007)}.}

\item{nPermRand}{number of permutations used for testing the Rand index for
being significantly different from a random assignment of nodes to the
clusters. Execution time is not significantly increased, even for a high
number of permutations. Defaults to 1000L.}

\item{cores}{integer indicating the number of CPU cores used for
permutation tests. If cores > 1, the tests are performed parallel.
Is limited to the number of available CPU cores determined by
\code{\link[parallel]{detectCores}}. Defaults to 1L (no parallelization).}

\item{logFile}{character string naming the log file within which the current
iteration number is stored (if permutation tests are performed). Defaults
to \code{NULL} so that no log file is generated.}

\item{seed}{integer giving a seed for reproducibility of the results.}

\item{verbose}{logical. If \code{TRUE} (default), status messages are shown.}

\item{fileLoadAssoPerm}{character giving the name (without extension) 
or path of the file storing the "permuted" association/dissimilarity 
matrices that have been exported by setting \code{storeAssoPerm} to 
\code{TRUE}. Only used for permutation tests. Set to \code{NULL} if no 
existing associations should be used.}

\item{fileLoadCountsPerm}{character giving the name (without extension) 
or path of the file storing the "permuted" count matrices that have been 
exported by setting \code{storeCountsPerm} to \code{TRUE}. 
Only used for permutation tests, and if \code{fileLoadAssoPerm = NULL}. 
Set to \code{NULL} if no existing count matrices should be used.}

\item{storeAssoPerm}{logical indicating whether the association/dissimilarity 
matrices for the permuted data should be stored in a file.
The filename is given via \code{fileStoreAssoPerm}. If \code{TRUE}, 
the computed "permutation" association/dissimilarity matrices can be reused
via \code{fileLoadAssoPerm} to save runtime. Defaults to \code{FALSE}.
Ignored if \code{fileLoadAssoPerm} is not \code{NULL}.}

\item{fileStoreAssoPerm}{character giving the file name to store a matrix
containing a matrix with associations/dissimilarities for the permuted 
data. Can also be a path.}

\item{storeCountsPerm}{logical indicating whether the permuted count matrices
should be stored in an external file. Defaults to \code{FALSE}.
Ignored if \code{fileLoadCountsPerm} is not \code{NULL}.}

\item{fileStoreCountsPerm}{character vector with two elements giving the 
names of two files storing the permuted count matrices belonging to the 
two groups.}

\item{returnPermProps}{logical. If \code{TRUE}, the global properties and 
their absolute differences for the permuted data are returned.}

\item{returnPermCentr}{logical. If \code{TRUE}, the centralities and 
their absolute differences for the permuted data are returned.}

\item{assoPerm}{only needed for output generated with NetCoMi v1.0.1! A list 
with two elements used for the permutation procedure.
Each entry must contain association matrices for \code{"nPerm"}
permutations. This can be the \code{"assoPerm"} value as part of the
output either returned from \code{diffnet} or from
\code{\link{netCompare}}.}

\item{dissPerm}{only needed for output generated with NetCoMi v1.0.1! 
Usage analog to \code{assoPerm} if a dissimilarity measure has been used 
for network construction.}
}
\value{
Returned is an object of class \code{microNetComp} with the following
  elements:\cr
  \tabular{ll}{
  \code{jaccDeg,jaccBetw,jaccClose,jaccEigen}\tab Values of Jaccard's index
  for the centrality measures\cr
  \code{jaccHub}\tab Jaccard index for the sets of hub nodes\cr
  \code{randInd}\tab Calculated Rand index\cr
  \code{properties}\tab List with calculated network properties\cr
  \code{propertiesLCC}\tab List with calculated network properties of the 
  largest connected component (LCC)\cr
  \code{diffGlobal}\tab Vectors with differences of global properties\cr
  \code{diffGlobalLCC}\tab Vectors with differences of global properties for
  the LCC\cr
  \code{diffCent}\tab Vectors with differences of the centrality values\cr
  \code{countMatrices}\tab The two count matrices returned
  from \code{netConstruct}\cr
  \code{assoMatrices}\tab The two association matrices returned
  from \code{netConstruct}\cr
  \code{dissMatrices}\tab The two dissimilarity matrices returned
  from \code{netConstruct}\cr
  \code{adjaMatrices}\tab The two adjacency matrices returned
  from \code{netConstruct}\cr
  \code{groups}\tab Group names returned from \code{netConstruct}\cr
  \code{paramsProperties}\tab Parameters used for network analysis
  }
  \strong{Additional output if permutation tests are conducted:}
 \tabular{ll}{
 \code{pvalDiffGlobal}\tab P-values of the tests for differential global
 properties\cr
 \code{pvalDiffGlobalLCC}\tab P-values of the tests for differential
 global properties in the LCC\cr
 \code{pvalDiffCentr}\tab P-values of the tests for differential centrality
 values\cr
 \code{pvalDiffCentrAdjust}\tab Adjusted p-values of the tests for
 differential centrality values\cr
 \code{permDiffGlobal}\tab \code{nPerm} x 10 matrix containing the absolute 
 differences of the ten global network properties (computed for the whole 
 network) for all \code{nPerm} permutations\cr
 \code{permDiffGlobalLCC}\tab \code{nPerm} x 11 matrix containing the 
 absolute differences of the eleven global network properties (computed for 
 the LCC) for all \code{nPerm} permutations\cr
 \code{permDiffCentr}\tab List with absolute differences of the four 
 centrality measures for all \code{nPerm} permutations. Each list contains 
 a \code{nPerm} x \code{nNodes} matrix.
 }
}
\description{
Calculate and compare network properties for microbial networks
  using Jaccard's index, the Rand index, and permutation tests.
}
\details{
\strong{Permutation procedure:}\cr
  Used for testing centrality measures and global network properties for
  group differences.\cr
  The null hypothesis of these tests is defined as
  \deqn{H_0: c1_i - c2_i = 0,} where \eqn{c1_i} and
  \eqn{c2_i} denote the centrality values of taxon i in group 1 and 2,
  respectively.\cr
  To generate a sampling distribution of the differences under \eqn{H_0},
  the group labels are randomly reassigned to the samples while the group
  sizes are kept. The associations are then re-estimated for each permuted
  data set. The p-values are calculated as the proportion of
  "permutation-differences" being larger than the observed difference. A
  pseudo-count is added to the numerator and denominator in order to avoid
  zero p-values. The p-values should be adjusted for multiple testing.

  \strong{Jaccard's index:}\cr
  Jaccard's index expresses for each centrality measure how equal the sets of
  most central nodes are among the two networks.\cr
  These sets are defined as nodes with a centrality value above a defined
  quantile (via \code{jaccQuant}) either of the empirical distribution of the
  centrality values (\code{lnormFit = FALSE}) or of a fitted log-normal
  distribution (\code{lnormFit = TRUE}).\cr
  The index ranges from 0 to 1, where 1 means the sets of most central nodes
  are exactly equal in both networks and a value of 0 implicates that the
  most central nodes are completely different.\cr
  The index is calculated as suggested by \cite{Real and Vargas (1996)}.
  \cr\cr
  \strong{Rand index:}
  The Rand index is used to express whether the determined clusterings are
  equal in both groups. The adjusted Rand index (ARI) ranges from -1 to 1,
  where 1 indicates that the two clusterings are exactly equal. The expected
  index value for two random clusterings is 0. The implemented test procedure
  is in accordance with the explanations in \cite{Qannari et al. (2014)},
  where a p-value below the alpha levels means that ARI is significantly
  higher than expected for two random clusterings.
}
\examples{
# Load data sets from American Gut Project (from SpiecEasi package)
data("amgut1.filt")

# Generate a random group vector
set.seed(123456)
group <- sample(1:2, nrow(amgut1.filt), replace = TRUE)

# Network construction:
amgut_net <- netConstruct(amgut1.filt, group = group,
                          measure = "pearson",
                          filtTax = "highestVar",
                          filtTaxPar = list(highestVar = 30),
                          zeroMethod = "pseudo", normMethod = "clr")

# Network analysis:
amgut_props <- netAnalyze(amgut_net, clustMethod = "cluster_fast_greedy")

# Network plot:
plot(amgut_props, sameLayout = TRUE)

#--------------------------
# Network comparison:

# Without permutation tests:
amgut_comp1 <- netCompare(amgut_props, permTest = FALSE)
summary(amgut_comp1)

\donttest{
  # With permutation tests (with only 100 permutations to decrease runtime):
  amgut_comp2 <- netCompare(amgut_props, 
                            permTest = TRUE, nPerm = 100L, cores = 1L, 
                            storeCountsPerm = TRUE, 
                            fileStoreCountsPerm = c("countsPerm1", "countsPerm2"),
                            storeAssoPerm = TRUE, 
                            fileStoreAssoPerm = "assoPerm",
                            seed = 123456)
  
  # Rerun with a different adjustment method ...
  # ... using the stored permutation count matrices
  amgut_comp3 <- netCompare(amgut_props, adjust = "BH",
                            permTest = TRUE, nPerm = 100L, 
                            fileLoadCountsPerm = c("countsPerm1", "countsPerm2"),
                            seed = 123456)
  
  # ... using the stored permutation association matrices
  amgut_comp4 <- netCompare(amgut_props, adjust = "BH",
                            permTest = TRUE, nPerm = 100L, 
                            fileLoadAssoPerm = "assoPerm",
                            seed = 123456)
  
  # amgut_comp3 and amgut_comp4 should be equal
  all.equal(amgut_comp3$adjaMatrices, amgut_comp4$adjaMatrices)
  all.equal(amgut_comp3$properties, amgut_comp4$properties)
  
  summary(amgut_comp2)
  summary(amgut_comp3)
  summary(amgut_comp4)
  
  #--------------------------
  # Use 'createAssoPerm' to create "permuted" count and association matrices
  createAssoPerm(amgut_props, nPerm = 100, 
                 computeAsso = TRUE,
                 fileStoreAssoPerm = "assoPerm",
                 storeCountsPerm = TRUE, 
                 fileStoreCountsPerm = c("countsPerm1", "countsPerm2"),
                 append = FALSE, seed = 123456)
  
  amgut_comp5 <- netCompare(amgut_props, permTest = TRUE, nPerm = 100L, 
                            fileLoadAssoPerm = "assoPerm")
  
  all.equal(amgut_comp3$properties, amgut_comp5$properties)
  
  summary(amgut_comp5)
}

}
\references{
\insertRef{benjamini2000adaptive}{NetCoMi} \cr\cr
  \insertRef{farcomeni2007some}{NetCoMi} \cr\cr
  \insertRef{gill2010statistical}{NetCoMi} \cr\cr
  \insertRef{qannari2014significance}{NetCoMi} \cr\cr
  \insertRef{real1996probabilistic}{NetCoMi}
}
\seealso{
\code{\link{summary.microNetComp}}, \code{\link{netConstruct}},
  \code{\link{netAnalyze}}
}
